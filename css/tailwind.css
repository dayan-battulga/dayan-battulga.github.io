@import 'tailwindcss';
@import 'tw-animate-css';
@plugin "@tailwindcss/forms";
@plugin '@tailwindcss/typography';
@source '../node_modules/pliny';
@custom-variant dark (&:where(.dark, .dark *));

/* Core theme configuration */
@theme {
  /* Font families */
  --font-sans: var(--font-space-grotesk), ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';

  /* Colors */
  --color-primary-100: rgb(139, 168, 136); /* matcha green */
  --color-primary-200: #e1eaff; /* blue */

  --color-gray-100: rgb(115 115 115);
  --color-gray-200: rgb(23, 23, 23);
  --color-light-gray-100: rgb(188, 188, 188);
  --color-light-gray-200: rgb(212, 212, 212);

  /* Line heights */
  --line-height-11: 2.75rem;
  --line-height-12: 3rem;
  --line-height-13: 3.25rem;
  --line-height-14: 3.5rem;

  /* Z-index values */
  --z-60: 60;
  --z-70: 70;
  --z-80: 80;
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }

  a,
  button {
    outline-color: var(--color-primary-500);
  }

  a:focus-visible,
  button:focus-visible {
    outline: 2px solid;
    border-radius: var(--radius-sm);
    outline-color: var(--color-primary-500);
  }
}

@layer utilities {
  .prose {
    & a {
      color: var(--color-primary-500);
      &:hover {
        color: var(--color-primary-600);
      }
      & code {
        color: var(--color-primary-400);
      }
    }
    & :where(h1, h2) {
      font-weight: 700;
      letter-spacing: var(--tracking-tight);
    }
    & h3 {
      font-weight: 600;
    }
    & :where(code):not(pre code) {
      color: var(--color-indigo-500);
    }
  }

  .prose-invert {
    & a {
      color: var(--color-primary-500);
      &:hover {
        color: var(--color-primary-400);
      }
      & code {
        color: var(--color-primary-400);
      }
    }
    & :where(h1, h2, h3, h4, h5, h6) {
      color: var(--color-gray-100);
    }
  }
}

.no-scrollbar::-webkit-scrollbar {
  display: none;
}

.no-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

/* https://stackoverflow.com/questions/61083813/how-to-avoid-internal-autofill-selected-style-to-be-applied */
input:-webkit-autofill,
input:-webkit-autofill:focus {
  transition:
    background-color 600000s 0s,
    color 600000s 0s;
}

.katex-display {
  overflow: auto hidden;
}

.content-header-link {
  opacity: 0;
  margin-left: -24px;
  padding-right: 4px;
}

.content-header:hover .content-header-link,
.content-header-link:hover {
  opacity: 1;
}

.linkicon {
  display: inline-block;
  vertical-align: middle;
}
html::-webkit-scrollbar {
  display: none;
}

/* Defines the central dot of the marker */
.pinging-marker {
  width: 16px; /* Size of the central dot */
  height: 16px;
  background-color: #007bff; /* Blue color, change as you like */
  border-radius: 50%; /* Makes it a circle */
  box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.4); /* A slight glow around the dot */
  position: relative; /* Needed for the pseudo-element positioning */
}

/* Creates the expanding ping animation */
.pinging-marker::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  background-color: #007bff;
  border-radius: 50%;
  transform: translate(-50%, -50%) scale(1); /* Start at the same size */
  opacity: 0.6;
  animation: ping-animation 1.5s infinite cubic-bezier(0, 0, 0.2, 1);
  /* 
     Animation duration: 1.5s
     Timing function: cubic-bezier for a specific ease
     Iteration count: infinite
  */
}

@keyframes ping-animation {
  0% {
    transform: translate(-50%, -50%) scale(0.8);
    opacity: 0.6;
  }
  80% {
    transform: translate(-50%, -50%) scale(3); /* Expand to 3 times the size */
    opacity: 0; /* Fade out */
  }
  100% {
    transform: translate(-50%, -50%) scale(3);
    opacity: 0;
  }
}
