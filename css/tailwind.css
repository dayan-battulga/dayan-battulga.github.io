@import 'tailwindcss';
@import 'tw-animate-css';
@plugin "@tailwindcss/forms";
@plugin '@tailwindcss/typography';
@source '../node_modules/pliny';
@custom-variant dark (&:where(.dark, .dark *));

/* Core theme configuration */
@theme {
  /* Font families */
  --font-sans: var(--font-space-grotesk), ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji',
    'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';

  /* Colors */
  --color-primary-100: rgb(139, 168, 136); /* matcha green */
  --color-primary-200: #e1eaff; /* blue */

  --color-gray-100: rgb(115 115 115);
  --color-gray-200: rgb(23, 23, 23);
  --color-light-gray-100: rgb(188, 188, 188);
  --color-light-gray-200: rgb(212, 212, 212);

  --color-dark-blue: rgb(5, 87, 157);

  /* Z-index values */
  --z-60: 60;
  --z-70: 70;
  --z-80: 80;
}

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }

  a,
  button {
    outline-color: var(--color-primary-500);
  }

  a:focus-visible,
  button:focus-visible {
    outline: 2px solid;
    border-radius: var(--radius-sm);
    outline-color: var(--color-primary-500);
  }
}

@layer utilities {
  .prose {
    & a {
      color: var(--color-primary-500);
      &:hover {
        color: var(--color-primary-600);
      }
      & code {
        color: var(--color-primary-400);
      }
    }
    & :where(h1, h2) {
      font-weight: 700;
      letter-spacing: var(--tracking-tight);
    }
    & h3 {
      font-weight: 600;
    }
    & :where(code):not(pre code) {
      color: var(--color-indigo-500);
    }
  }

  .prose-invert {
    & a {
      color: var(--color-primary-500);
      &:hover {
        color: var(--color-primary-400);
      }
      & code {
        color: var(--color-primary-400);
      }
    }
    & :where(h1, h2, h3, h4, h5, h6) {
      color: var(--color-gray-100);
    }
  }
}

.no-scrollbar::-webkit-scrollbar {
  display: none;
}

.no-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

/* https://stackoverflow.com/questions/61083813/how-to-avoid-internal-autofill-selected-style-to-be-applied */
input:-webkit-autofill,
input:-webkit-autofill:focus {
  transition:
    background-color 600000s 0s,
    color 600000s 0s;
}

.katex-display {
  overflow: auto hidden;
}

.content-header-link {
  opacity: 0;
  margin-left: -24px;
  padding-right: 4px;
}

.content-header:hover .content-header-link,
.content-header-link:hover {
  opacity: 1;
}

.linkicon {
  display: inline-block;
  vertical-align: middle;
}
html::-webkit-scrollbar {
  display: none;
}

/* Defines the central dot of the marker */
.pinging-marker {
  width: 16px; /* Size of the central dot */
  height: 16px;
  background-color: #007bff; /* Blue color, change as you like */
  border-radius: 50%; /* Makes it a circle */
  box-shadow: 0 0 0 4px rgba(0, 123, 255, 0.4); /* A slight glow around the dot */
  position: relative; /* Needed for the pseudo-element positioning */
}

/* Creates the expanding ping animation */
.pinging-marker::after {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  background-color: #007bff;
  border-radius: 50%;
  transform: translate(-50%, -50%) scale(1); /* Start at the same size */
  opacity: 0.6;
  animation: ping-animation 1.5s infinite cubic-bezier(0, 0, 0.2, 1);
  /* 
     Animation duration: 1.5s
     Timing function: cubic-bezier for a specific ease
     Iteration count: infinite
  */
}

@keyframes ping-animation {
  0% {
    transform: translate(-50%, -50%) scale(0.8);
    opacity: 0.6;
  }
  80% {
    transform: translate(-50%, -50%) scale(10); /* Expand to 3 times the size */
    opacity: 0; /* Fade out */
  }
  100% {
    transform: translate(-50%, -50%) scale(10);
    opacity: 0;
  }
}

@keyframes ping {
  0% {
    opacity: 1;
    transform: scale(1);
  }
  75%,
  to {
    opacity: 0;
    transform: scale(2.5);
  }
}

@keyframes pulse {
  50% {
    opacity: 0.5;
  }
}

@keyframes cloud {
  0% {
    transform: translate(300px, -80px);
  }
  to {
    transform: translate(-50px, -80px);
  }
}

@keyframes plane {
  0% {
    transform: translate(0) rotate(-65deg);
  }
  to {
    transform: translate(-700px, -300px) rotate(-65deg);
  }
}

@keyframes plane-shadow {
  0% {
    transform: translate(-30px, 30px) rotate(-65deg);
  }
  to {
    transform: translate(-730px, -270px) rotate(-65deg);
  }
}

@keyframes highlight {
  0% {
    transform: scaleX(0);
  }
  to {
    transform: scaleX(1);
  }
}

@keyframes rainbow {
  0% {
    background-position: 0;
  }
  to {
    background-position: 200%;
  }
}

@keyframes wave {
  0%,
  to {
    transform: rotate(0);
  }
  50% {
    transform: rotate(20deg);
  }
}

:root {
  --aura-rainbow-offset: -20%;
  --aura-animation-duration: 12s;
}

.aura-container {
  pointer-events: none;
  top: 0;
  height: 18rem; /* calc(var(--spacing)*72) */
  width: 100%;
  position: absolute;
  overflow: hidden;
}

@media (min-width: 48rem) {
  .aura-container {
    height: 20rem; /* calc(var(--spacing)*80) */
  }
}

@media (min-width: 64rem) {
  .aura-container {
    height: 24rem; /* calc(var(--spacing)*96) */
  }
}

.aura-rays-wrapper {
  inset: 0;
  align-items: center;
  display: flex;
  position: absolute;
}

.aura-wrapper {
  z-index: -1;
  opacity: 1;
  width: 300%;
  height: 100%;
  position: absolute;
  left: -100%;
  overflow: hidden;
}

@media (min-width: 48rem) {
  .aura-wrapper {
    width: 400%;
    left: -150%;
  }
}

.dark .aura-wrapper {
  opacity: 1;
}

.aura-rainbow-element {
  aspect-ratio: 1;
  width: 120%;
  position: absolute;
  left: -10%;
}

.aura-content {
  height: 100%;
  position: relative;
}

.animate-rainbow {
  animation: rainbow var(--speed, 2s) infinite linear;
}

.aura-rays {
  -webkit-mask-image: linear-gradient(
      45deg,
      transparent 35%,
      rgba(0, 0, 0, 0.9) 40%,
      transparent 45%,
      rgba(0, 0, 0, 0.09) 50%,
      transparent 55%,
      rgba(0, 0, 0, 0.9) 60%,
      transparent 65%
    ),
    linear-gradient(rgba(0, 0, 0, 0.05), transparent 75%);
  mask-image: linear-gradient(
      45deg,
      transparent 35%,
      rgba(0, 0, 0, 0.9) 40%,
      transparent 45%,
      rgba(0, 0, 0, 0.09) 50%,
      transparent 55%,
      rgba(0, 0, 0, 0.9) 60%,
      transparent 65%
    ),
    linear-gradient(rgba(0, 0, 0, 0.05), transparent 75%);
  -webkit-mask-position:
    50% 0,
    0 0;
  mask-position:
    50% 0,
    0 0;
  -webkit-mask-size: 200%, auto;
  mask-size: 200%, auto;
}

@media (min-width: 48rem) {
  .aura-rays {
    -webkit-mask-size: 150%, auto;
    mask-size: 150%, auto;
  }
}

.aura {
  -webkit-mask-image: radial-gradient(farthest-side at 50% -100%, black, transparent 100%);
  mask-image: radial-gradient(farthest-side at 50% -100%, black, transparent 100%);
}

@keyframes aura-rainbow-spin {
  0% {
    transform: translateY(var(--aura-rainbow-offset)) rotate(0deg);
  }
  to {
    transform: translateY(var(--aura-rainbow-offset)) rotate(-360deg);
  }
}

.aura-rainbow {
  animation: aura-rainbow-spin var(--aura-animation-duration) linear infinite;
  background: conic-gradient(
    #fc6969 0,
    #f96ab2 12.5%,
    #a27bfb 25%,
    #639dfa 37.5%,
    #49c3fc 50%,
    #2dbcab 62.5%,
    #90cf32 75%,
    #f8ac29 87.5%,
    #fc6969 100%
  );
}

.dark .aura-rainbow {
  filter: saturate(0.8) brightness(1.2);
  background: conic-gradient(
    #2fc265 0,
    #2aa272 20%,
    #369883 40%,
    #6e6bd0 60%,
    #369883 80%,
    #2aa272 90%,
    #2fc265 100%
  );
}

@theme inline {
  --animate-orbit: orbit calc(var(--duration)*1s) linear infinite;
  @keyframes orbit {
  0% {
    transform: rotate(calc(var(--angle) * 1deg)) translateY(calc(var(--radius) * 1px)) rotate(calc(var(--angle) * -1deg));
    }
  100% {
    transform: rotate(calc(var(--angle) * 1deg + 360deg)) translateY(calc(var(--radius) * 1px)) rotate(calc((var(--angle) * -1deg) - 360deg));
    }
  }
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}